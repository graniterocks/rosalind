let stringToList text = 
    Seq.toList text 
    
let listToString l = l |> List.toArray |> System.String 

let test = stringToList "abc"

let countChars (data : list<char>) (c : char) = data |> List.filter (fun n -> n.Equals(c)) |> List.length

let DNA = 
    let dataSet = stringToList "AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC"
    let countChars data c  = data |> List.filter(fun n -> n =c) |> List.length
   
    (countChars dataSet 'A', countChars dataSet 'C', countChars dataSet 'G', countChars dataSet 'T')

// let (a, c, g, h) = DNA
// printf "%d%d%d%d" a c g h;;

let REVC =
    let dataSet = stringToList "TCGATACGTAAACCGAAGTGCTCGCACGCCAGACGGCAGTCATCAAATTGTGTGTTACTCGCGGCTTTGGGATGAATCGCCACATTTGTATTTTACTCCTATGCCCGATCGTATGTTTGGGTTCCCTTCTACTCTCGGCTAAGGAACAAGTTAGCTAGTCAGGTACATTACCGCTAGCTACTCATTTCGTCGGATTCGTAGTCTGTATGGCTCCCGTCGGCCTTGGCTATCCAGGCGCCATTTCGGATACTTCCCACCCCTATGGCCTGCTCATCGTTTCGGAAGGGGCCCCCAGAGGCTGTAGCGTTCAGCGAGAAGCAATAGGGGTGTAATAAGGGTCGACTGGGGTAGGATAACTGGAACAGTTTACAGGCTCAATAGAGTAATAAGTGGATTCGACAAAACCTAAGAATATTTCTGTTAGTGTTCCGGATCTACCCAGACATTGCTAGGCAGAGAGTCTCAGGGTGGTTGCTTTCCTAGGAACCGCTTGTTGTACCTGCCCTAGTAATGAATAGTAGTGATCGAGACCGCAGTTCTGATAAGGGCAAGGGCAAAGGTGTGCACGACACCTATACGGCCCCTAAATCTGACTTCAAGATCCAGGTCCAAAACAATCGTACCAAACTACCGTAGATGCTACGCTGATTTTTGTATCTATACTCCTGATATATCCTCCGTAACATGAGAGGCTCATCAGAACAGCGATGTCACTCACACCGCTCATTAAGTGCGGCACCCAAGCCCCGTATCGCGGTACCAACCTGTCTGTTTGAATCAGCTGTGTAATGGTGGAGGCCATCATGATCGATATATTAAGTCTGAGTTGCTCGTTGTGTCGCCGGACAAAAAATAAGTCCCAGTCAAAATCAAACACGGGCGTCCTATAAGCGATATGGTACACTTCCGGCCCGTCGACGTAGATGGTAAGCCCCCTCT"
    let compliment c = 
        match c with 
        | 'A' -> 'T'
        | 'T' -> 'A'
        | 'C' -> 'G'
        | 'G' -> 'C'
        | _ -> c
    dataSet |> List.rev |> List.map(compliment) |> listToString   

printfn "%s" REVC    